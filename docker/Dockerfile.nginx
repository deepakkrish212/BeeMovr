# ---------------------------------------------------------------------
# HOW TO BUILD THIS IMAGE
# @remarks
# Normally, we use Docker Compose to build everything including this,
# but here's how to build this separately just in case you need to.
#
# @example
# cd BeeMovr
# docker build -f ./Dockerfile.reverse-proxy -t reverse-proxy .
#
# HOW TO RUN THIS IMAGE
# @remarks
# Running the example below runs Nginx with proxy pass config:
#   ./BeeMovr/docker/nginx.conf
#   ./BeeMovr/docker/beemovr.com.conf
# However, just with Nginx alone, it's not going to work, as this is
# supposed to work together with Node.js through Docker Compose.
#
# @example
# docker run reverse-proxy
#
# HOW TO DELETE THIS IMAGE
# @example
# docker image rm reverse-proxy -f
# ---------------------------------------------------------------------
FROM nginx:latest

LABEL com.beemovr.reverse-proxy.maintainer="Soobin Rho <soobin@nsustain.com>"

#
# System setup
#
RUN rm -f /etc/nginx/conf.d/default.conf
COPY ./nginx.conf /etc/nginx/nginx.conf

# Unlike RUN, which runs commands at the build time,
# CMD is what the image runs when we use "docker run ..."
# The difference between CMD and ENTRYPOINT is that
# extra arguments at "docker run <HERE>" override CMD,
# while ENTRYPOINT is still preserved.

# "The best use for ENTRYPOINT is to set the imageâ€™s main command,
# allowing that image to be run as though it was that command
# (and then use CMD as the default flags)."
# Example:
#   ENTRYPOINT ["s3cmd"]
#   CMD ["--help"]
# Source:
#   https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
ENTRYPOINT ["nginx"]
CMD ["-g", "daemon off;"]
